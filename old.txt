/*private HashMap<String, Integer> compterCarteCouleur(PiocheTransport pt) {
        HashMap<String, Integer> compteCouleurs = new HashMap<String, Integer>();
        for (Carte ct : pt.getCartes()) {
            String couleur = ((CarteTransport) ct).getCouleur();
            Integer i = compteCouleurs.get(couleur);

            if (compteCouleurs.containsKey(couleur)) {
                compteCouleurs.put(couleur, ((Integer) compteCouleurs.get(couleur) + 1));
            } else {
                compteCouleurs.put(couleur, 1);
            }
        }

        return compteCouleurs;
    }*/

 /*@Test
    public void test_initialisation_pioche_wagon() {

        Jeu j = new Jeu();
        j.initialiserJeu();

        PiocheTransport pw = j.getPiocheCartesTransportWagon();
        HashMap<String, Integer> compteCouleurs = this.compterCarteCouleur(pw);

        //nombre de cartes de la pioche au depart
        assertEquals("Nombre de carte wagons au debut du jeu ne correspondant pas a la regle", Jeu.NOMBRE_CARTES_TRANSPORT_WAGON, pw.taille());

        //nombre de carte de chaque couleur et de jokers
        Iterator it = compteCouleurs.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            if (!pair.getKey().equals(CarteTransport.JOKER)) {
                assertEquals("Nombre de carte de couleur "+pair.getKey()+ " ne correspondant pas a la regle ", Jeu.NOMBRE_CARTES_TRANSPORT_WAGON_PAR_COULEUR, pair.getValue());
            } else {
                assertEquals("Nombre de jokers ne correpondant pas a la regle", Jeu.NOMBRE_CARTES_TRANSPORT_JOKER_PAR_PIOCHE, pair.getValue());
            }
            it.remove(); // avoids a ConcurrentModificationException
        }
    }*/

    /*private void initialiserUX(){
    		File file = new File("src/main/resources/cartes.transport/wagons/wagonsBlanc.jpeg");
    		Image image = new Image(file.toURI().toString());
    		System.out.println(image);
    		imageViewCW1.setImage(image);
    	}*/

    	/*chargerImage(imageViewCW1, "src/main/resources/images/cartes/transport/wagons/wagonsRouge.jpeg");
                chargerImage(imageViewCW2, "src/main/resources/images/cartes/transport/wagons/wagonsVert.jpeg");
                chargerImage(imageViewCW3, "src/main/resources/images/cartes/transport/wagons/wagonsViolet.jpeg");*/

                   /*private void setImg(ImageView imv, String couleur){
                        //printMap(images);
                        //System.out.println(((Image)this.images.get(couleur)));
                        //Image img = this.images.get("Jaune");
                        Image img = this.images.get(couleur);
                        //System.out.println(img);
                        //System.out.println(img);
                        imv.setImage(img);
                    }


                    private void chargerLesImages(){
                        for (String couleur:
                                this.mainApp.getJeu().getPiocheCartesTransportWagon().getCouleursDesCartesTransport()) {
                            File file = new File(PiochesController.CHEMIN_BASE_CARTE_WAGON+couleur+ PiochesController.EXTENSION_IMAGES);
                            this.images.put(couleur, new Image(file.toURI().toString()));
                        }
                    }

                  */

                  /*private ArrayList<String> getUrls(ArrayList<CarteTransport> cartesVisibles) {
                          ArrayList<String> urls = new ArrayList<String>();
                          for (CarteTransport ct : cartesVisibles) {
                              urls.add(determinerUrl(ct));
                          }
                          return urls;
                      }*/

                      /*private void chargerImage(ImageView imv, String cheminFichier) {
                              File file = new File(cheminFichier);
                              Image image = new Image(file.toURI().toString());
                              imv.setImage(image);
                          }*/

                          /*private Button creerBouttonImageCarteVisibles(CarteTransport ct, int compteur) {
                                  final Button nouveauBoutton = OutilGraphique.creerBoutton(ct);
                                  nouveauBoutton.setId("" + compteur);

                                  nouveauBoutton.setOnAction(new EventHandler<ActionEvent>() {
                                      public void handle(ActionEvent event) {
                                          //avoir la postion du boutton dans le vbox

                                          System.out.println("" + nouveauBoutton.getId());

                                          //en deduire la position de la carte a transferer dans les une des listes respectives
                                          //transferer la carte a la main du joueur
                                          transfererCarteVisibleALaMainDuJoueur("" + nouveauBoutton.getId());
                                          //remplacer la carte visible concernee par une nouvelle carte piochee au hasard dans une des deux pioches ???

                                          //checker la regle des 3 jokers
                                          if(mainApp.getJeu().detecterTropJokersVisibles()){
                                              System.out.println("3 JOKERS!!!");
                                              mainApp.getJeu().reseterCartesVisibles();
                                              listeBouttonsCartesVisibles.getChildren().clear();
                                          }
                                      }
                                  });

                                  return nouveauBoutton;
                              }*/


                              /*private void transfererCarteVisibleALaMainDuJoueur(String id) {
                                      int idInt = Integer.parseInt(id);

                                      ArrayList<CarteTransport> cartesVisiblesWagons = this.mainApp.getJeu().getPiocheCartesTransportWagon().getCartesVisibles();
                                      ArrayList<CarteTransport> cartesVisiblesBateaux = this.mainApp.getJeu().getPiocheCartesTransportBateau().getCartesVisibles();

                                      CarteTransport carteTransportATransferer, carteTransportPiochee;
                                      if (idInt <= 2) {
                                          carteTransportATransferer = cartesVisiblesBateaux.get(idInt);

                                          //On pioche une nouvelle carte
                                          carteTransportPiochee = (CarteTransport) this.mainApp.getJeu().getPiocheCartesTransportBateau().piocherCarte();

                                          //On remplace la carte dans la liste des cartes visibles
                                          this.mainApp.getJeu().getPiocheCartesTransportBateau().getCartesVisibles().set(idInt, carteTransportPiochee);

                                          //On remplace le boutton
                                          Button b = creerBouttonImageCarteVisibles(carteTransportPiochee);
                                          b.setId(""+idInt);
                                          this.listeBouttonsCartesVisibles.getChildren().set(idInt, b);
                                      } else {
                                          idInt -= 3;

                                          carteTransportATransferer = cartesVisiblesWagons.get(idInt);

                                          carteTransportPiochee = (CarteTransport) this.mainApp.getJeu().getPiocheCartesTransportWagon().piocherCarte();

                                          this.mainApp.getJeu().getPiocheCartesTransportWagon().getCartesVisibles().set(idInt, carteTransportPiochee);

                                          idInt+=3;

                                          Button b = creerBouttonImageCarteVisibles(carteTransportPiochee);
                                          b.setId(""+idInt);
                                          this.listeBouttonsCartesVisibles.getChildren().set(idInt, b);
                                      }

                                      gererAjoutCarteMain(carteTransportATransferer);

                                  }*/